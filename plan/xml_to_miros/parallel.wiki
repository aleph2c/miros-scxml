[[subgoals.xml_to_miros|back]],  [[xml_to_miros]]
*Parallel*
= Observer ([[local:C:/Vim8.1/.vim/ooda.pdf|diagram]]) = 
== Evidence ([[evidence.parallel|evidence]]) ==

  *What defines Success?:* ([[subgoals.parallel|subgoals]])
    To implement parallel regions to an arbitrary level with SCXML.

  *What is the problem?*
  
    Miros does not implement orthogonal regions, it only supports orthogonal
    components.
    
    I have demonstrated in the past how to do with with miros, but only to one
    level.  We would like parallel regions to work at an arbitrary level.
    
    I do not understand this problem well enough to define the requirements for
    the SCXML project.
    
    *NOTE 1:* I do not know if I want to support the final behavior of the SCXML
    requirement, since magically posting signals seems really stupid.  The
    posting of events should happen by explicit design, not implicitly due to
    someone's design preferences.
    
    *NOTE 2:* this is actually a core requirement, not like other aspects of the
    SCXML (noisy)

  *Discoveries:* ([[notes.parallel|notes]])
  
  [[file:///C:/github/miros/docs/othogonalregions.html|old write up]]
  [[https://github.com/aleph2c/miros/blob/master/examples/xml_chart.py|old code]]
  
= Orient =
  *Symptoms:* [[symptoms.parallel|symptoms]]

== Questions ==
  *Questions for Parallel: >= 5*
    Can you think of anyway to speed up your feedback cycle?
    Do you have enough information?
    Is your information organized?
    Can you reproduce the problem?
    Can you simplify your test?
    Do you have something to baseline from?
    What recently changed?
    What don't you know that you need to know?
  
  *Assumptions*

= Decide =
  [[#Questions]]
  *Research Needed For?:*
 
  In the experiment folder, using the ActiveObject class and flat state methods
  implement:

  * [X] xml_chart_2
  * [ ] xml_chart_3 
        
  Add requirements/hypothesis/ideas to this plan as you work through the problem.
  
  In your example code automate the construction of a set of regions
  parallel_example_1.py:ScxmlChart:107,115
  
  Timebox your work, really hustle in how you attack these problems.  Use your
  previous work as a reference.

  [[#Questions]]
  *Idea/Hypotheses for Parallel: >=5*
  * [ ] Add subproject from the xml_chart_3 diagram, because it is so hard to
        implement 
  * [ ] Extend instrumentation for p as described in the xml_chart example above.
  * [ ] Need to find a way to recursively post to outer charts, see
        post_p_final_to_outer_if_ready to see why this is required
  * [ ] Need a way to name final events given a p region name, see
        parallel_example_1.py:ScxmlChart:107
  * [ ] Need a way to progammatically construct p_regions given p region state
        tags: parallel_example_1.py:ScxmlChart:107
  * [ ] Need a way to make hidden-region-state names given p region state
        tags: parallel_example_1.py:ScxmlChart:107
  * [ ] Need a way to make region-state-names given p region state
        tags: parallel_example_1.py:ScxmlChart:107
  * [ ] Build template for a parallel region state, using p_spy_on
  * [ ] Build template for a parallel region state for globs, using p_spy_on
  * [ ] Need to inject the p name in front of each state which it is within so
        that the code can be read at a glance
  * [ ] The ScxmlChart will have a regions dict which who's keys are the names
        of the 'p' tags in the xml documente.  If a 'p' tag contains inner 'p'
        tags, they will just be added to the regions dict in a flat manner.  The
        recursive property will be handled by the outer state pointers of the
        state functions, and by the 'p' junctions into a given parallel region.
        See parallel_example_1.py:p:413
  * [ ] According to this stupid SCXML standard, any p region will have to
        implicitly have a final state, from which the chart will post a
        magically named signal when all regions are in their final state.
        Should I add this?  It could add a lot of complexity (technical debt)
        and it could just be added to the XML in an explicit fashion

  *Chosen Research-Goal/Hypothesis*
    

== Plan ([[plan.parallel|plan]]) ==

= Act =
  

