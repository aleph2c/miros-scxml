[[subgoals.xml_to_miros|back]],  [[xml_to_miros]]

*Parallel*
= Observe =
== Evidence ([[evidence.parallel|evidence]]) ==

  *What defines Success?:* ([[subgoals.parallel|subgoals]], [[#Orient]], [[#Decide]])

    Do a review and write down a list of:
      * code smell
      * small improvements
      * or timebombs

  *What is the problem?*

    [[#Orient]]
    [[#Decide]]

  *Discoveries:* ([[notes.xml_to_miros|notes]])

    [[notes.xml_to_miros|notes#Bestiary]]

    Python Logging notes:

      http://zetcode.com/python/logging/
      https://martinheinz.dev/blog/24
      https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/

    With the current design, there can be no entry and exit conditions for the
    regions.  If there are, then the I1 dynamics will not work.  The I1 is a
    BOUNCE_SAME_META_SIGNAL.  It exits the region in which it is running in
    order to re-engage with that regions INIT_META_SIGNAL handling.  This can be
    changed, but the region entry/exit was just a bonus, it wasn't part of the
    original specification, but if we include it, were are including a bug.  If
    I change it, it will be a lot of effort exerted for something that doesn't
    matter that much.  This applies to D3 as well.

    To setup auto-testing:

      1) Change the tmux display time to 4 seconds

        ctrl-A:
        set -g display-time 4000

      2) In the terminal setup a watch command:

        while inotifywait -e modify xml_chart_5.py
        logger_config.yaml; do python xml_chart_5.py && tmux display-message "SUCCESS" || tmux display-message "FAILURE"; done

    *How To:*

    To track a meta event (1-4 takes about 10 minutes to set up):
      1. place a print(ps(_e)) at it's source
      2. write out a list in this document, one line for each line of the above
         output... associate each line with a Vim marker, {a, b, c, ... }
      3. for each line in this listing go to the corresponding location in the
         code and add an 'investigate(r, e, _e)'.  Assign the proper marker
      4. add a time delay after the broken test in the outer program so that you
         can break into the statechart thread and the program will continue to
         run.
      5. for each step look at the log and look poke around in the investigate
         location of the marked spot.

    *Warnings:*

    The lazy-inners thing is causing me trouble now (can you make this go away?)

    Since the state functions are decoratored, it is very tricky to compare the
    using the '==' operator.  Technically speaking, a decorated function and its
    naked version are not equivalent.  To avoid what could be a very nasty and
    hard to track bug, compare the string names of function not the functions
    directly. (You can use the __wrapped__ magic method!)

    Do not use post_fifo or post_lifo within mini-steps.  Instead use _post_fifo
    and _post_lifo and let the driver push all of the intermediate events
    through the chart.

    The use of the rr.fns dict has made it harder to troubleshoot problems
    because I can not grep and search for the functions I want to search for
    directly.  Try to make your code grep-able.

== Future Goals ==

      If you are tired, pick an easy goal, if you are fresh pick a hard goal

      *Easy Goals:*
      * [ ] Remove references to outmost for final_signal_name handling, use
            same, inner or outer attributes instead. (figure out which is
            appropriate)

      *Harder Goals:*
      * [ ] Turn meta_trans into an HSM
      * [ ] Add META_HOOKS
      * [ ] Find a way to get rid of the timeout in the test.  The statechart
            should able to tell you when it is done or not.
      * [ ] Exclusive Transitions into a parallel state. (this will require a
            change in the drawing techniques)
      * [ ] Need a mechanism to clear the graph's cache.  This will be needed
            when an XML diagram is being used to over-write and inner part of a
            program.

    Pre-made check lists for consistency work:

    * [ ] All WTF events
      * [ ] RA1
      * [ ] RB1
      * [ ] RC1
      * [ ] RC2
      * [ ] RD1
      * [ ] RE1
      * [ ] RF1
      * [ ] RG1
      * [ ] RH1
      * [ ] SRB1
      * [ ] SRD1
      * [ ] SRD2
      * [ ] SRE1
      * [ ] SRE2
      * [ ] SRE3
      * [ ] SRF1
      * [ ] SRG1
      * [ ] SRH1
      * [ ] SRH2
      * [ ] SRH3
      * [ ] PC1
      * [ ] PF1
      * [ ] PG1
      * [ ] PG2
      * [ ] SA1
      * [ ] SB1
      * [ ] SC1
      * [ ] SD1
      * [ ] SD2
      * [ ] SH1

    * [ ] R Audit:
      * [ ] RB1
      * [ ] RC1
      * [ ] RC2
      * [ ] RD1
      * [ ] RE1
      * [ ] RF1
      * [ ] RG1
      * [ ] RH1

    * [ ] SR Audit:
      * [ ] SRB1
      * [ ] SRD1
      * [ ] SRD2
      * [ ] SRE1
      * [ ] SRE2
      * [ ] SRE3
      * [ ] SRF1
      * [ ] SRG1
      * [ ] SRH1
      * [ ] SRH2
      * [ ] SRH3

    * [ ] P Audit:
      * [ ] PC1
      * [ ] PF1
      * [ ] PG1
      * [ ] PG2

    * [ ] S Audit:
      * [ ] SA1
      * [ ] SB1
      * [ ] SC1
      * [ ] SD1
      * [ ] SD2
      * [ ] SH1

    * [ ] Injectors:
      * [ ] p (active object)
      * [ ] p_p11 (Region)
      * [ ] p_p12 (Region)
      * [ ] p_p12_p11 (Region)
      * [ ] p_p22 (Region)

    * [ ] Outer Injectors:
      * [ ] p (active object)

    * [ ] Inner Injectors:
      * [ ] p_p11 (Region)
      * [ ] p_p12 (Region)
      * [ ] p_p12_p11 (Region)
      * [ ] p_p22 (Region)

    * [ ] Region State Functions:
      * [ ] p_p11_r1_region
      * [ ] p_p12_p11_r1_region
      * [ ] p_p11_r2_region
      * [ ] p_p12_p11_r1_region
      * [ ] p_p12_p11_r2_region
      * [ ] p_p12_r1_region
      * [ ] p_p12_r2_region
      * [ ] p_p22_r1_region
      * [ ] p_p22_r2_region
      * [ ] p_r1_region
      * [ ] p_r2_region

    * [ ] Under Region State Functions:
      * [ ] p_p11_r1_under_hidden_region
      * [ ] p_p11_r2_under_hidden_region
      * [ ] p_p12_p11_r1_under_hidden_region
      * [ ] p_p12_p11_r2_under_hidden_region
      * [ ] p_p12_r1_under_hidden_region
      * [ ] p_p12_r2_under_hidden_region
      * [ ] p_p22_r1_under_hidden_region
      * [ ] p_p22_r2_under_hidden_region
      * [ ] p_r1_under_hidden_region
      * [ ] p_r2_under_hidden_region

    * [ ] Over Region State Functions:
      * [ ] p_p11_r1_over_hidden_region
      * [ ] p_p11_r2_over_hidden_region
      * [ ] p_p12_p11_r1_over_hidden_region
      * [ ] p_p12_p11_r2_over_hidden_region
      * [ ] p_p12_r1_over_hidden_region
      * [ ] p_p12_r2_over_hidden_region
      * [ ] p_p22_r1_over_hidden_region
      * [ ] p_p22_r2_over_hidden_region
      * [ ] p_r1_over_hidden_region
      * [ ] p_r2_over_hidden_region

    * [ ] Active Object States:
      * [ ] outer_state
      * [ ] p (injector)
      * [ ] some_other_state

    * [ ] Other Region States (not injectors or regions):
      * [ ] p_p11_r1_final
      * [ ] p_p11_r1_over_hidden_region
      * [ ] p_p11_r1_under_hidden_region
      * [ ] p_p11_r2_final
      * [ ] p_p11_r2_over_hidden_region
      * [ ] p_p11_r2_under_hidden_region
      * [ ] p_p11_s11
      * [ ] p_p11_s12
      * [ ] p_p11_s21
      * [ ] p_p11_s22
      * [ ] p_p12_p11
      * [ ] p_p12_p11_r1_over_hidden_region
      * [ ] p_p12_p11_r1_under_hidden_region
      * [ ] p_p12_p11_r2_over_hidden_region
      * [ ] p_p12_p11_r2_under_hidden_region
      * [ ] p_p12_p11_s11
      * [ ] p_p12_p11_s12
      * [ ] p_p12_p11_s21
      * [ ] p_p12_r1_final
      * [ ] p_p12_r1_over_hidden_region
      * [ ] p_p12_r1_under_hidden_region
      * [ ] p_p12_r2_final
      * [ ] p_p12_r2_over_hidden_region
      * [ ] p_p12_r2_under_hidden_region
      * [ ] p_p12_s12
      * [ ] p_p12_s21
      * [ ] p_p12_s22
      * [ ] p_p22_r1_final
      * [ ] p_p22_r1_over_hidden_region
      * [ ] p_p22_r1_under_hidden_region
      * [ ] p_p22_r2_final
      * [ ] p_p22_r2_over_hidden_region
      * [ ] p_p22_r2_under_hidden_region
      * [ ] p_p22_s11
      * [ ] p_p22_s12
      * [ ] p_p22_s21
      * [ ] p_p22_s22
      * [ ] p_r1_final
      * [ ] p_r1_over_hidden_region
      * [ ] p_r1_region
      * [ ] p_r1_under_hidden_region
      * [ ] p_r2_final
      * [ ] p_r2_over_hidden_region
      * [ ] p_r2_region
      * [ ] p_r2_under_hidden_region
      * [ ] p_s21

    Region notes:

= Orient =
  *Symptoms:* [[symptoms.parallel_example_4|symptoms]]

  *Assumptions (at first invisible)*
    To find your assumptions, look for two pieces of evidence that contradict
    each other. (may have to wait a couple of loops)

  *Questions for :*

  === Pre trouble-shooting questions ===
    * [ ] Do you have enough information?
    * [ ] Is your information organized?
    * [ ] Can you draw a diagram of the components and their
          interactions?
    * [ ] Does your logging infrastructure work?
    * [ ] Do you need to write some code to make it easier to
          see?
    * [ ] Can you think of anyway to speed up your feedback cycle?

    * [ ] Is it a repair or a pioneering problem?  Did it work
          once before, or did it work somewhere else?  Yes:
          Repair, No: Pioneering.

  === Repair (Complexity increases exponentially) ===
    * [ ] Can you test the individual components to reduce
          complexity?
    * [ ] Can you exchange components?
    * [ ] Can you reduce the number of interactions?
    * [ ] Are you continuing event though you know that something
          you have previously tested isn't working?
    * [ ] Has a thing you have previously tested fooled you into
          thinking it works, when it doesn't work? (Never assume
          something is right before you have checked it twice)

  == Pioneering ==
    * [ ] Has someone else solved this before (search)? Can you
          turn this into a repair?
    * [ ] Do you have something to baseline from?
    * [ ] Looking under the problem, are you focused on the right
          goals?  Are you stuck on solving a hard problem, when
          there is an easy problem?
    * [ ] Do you understand how your existing system works?  If
          not, can you draw diagrams and describe how it works
          before you continue?
    * [ ] What don't you know that you need to know?

  == Custom Questions: (>=5) ==
    * 

= Decide =

  *Research Needed For?:* ([[#Observe]], [[#Orient]])
    * would it work if the PF1 was sourced from region1 and into region2

  *Idea/Hypotheses: >=5* ([[#Observe]], [[#Orient]], [[#Future Goals]])
  * [ ] Write a method called in_same_hsm in the XmlChart
  * [ ] 

  *Chosen Research-Goal/Hypothesis*

== Plan ([[plan.parallel_example_4|plan]]) ==

= Act =


