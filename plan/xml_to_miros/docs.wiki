[[subgoals.xml_to_miros|back]]
*Build in Jessica's doc system*
= Observer ([[local:C:/Vim8.1/.vim/ooda.pdf|diagram]]) = 
== Evidence ([[evidence.docs|evidence]]) ==

  *What defines Success?:* ([[subgoals.docs|subgoals]])
    Write a minimal set of documents which

    * can be used by someone else, to use the library
    * can be used by me to make sense of this project after you have forgotten how it
      was implemented (6 months).

  *What is the problem?*
    I need to port it from miros-xml, and I don't know how to use it.

  *Discoveries:* ([[notes.docs|notes]])

    * Every significant project will now come with a tmuxp.yaml in its base
      directory.  This file can be used to build a tmux session, which typically
      will have one tab for programming, one for automation of the doc creation
      and software testing and the last to control the tmux interface itself.

    * To load this tmux configuration:
      tmuxp load tmuxp.yaml

    * The documentation automation, in the second tab will be reliant upon
      inotifywait:

        while inotifywait -e modify ./source/*.rst ./source/_static/*.uxf; do make html; done

    * The documentation will be built using a Makefile in the docs/source
      directory.  This make file will recursively call another make file called
      pictures.mk in the docs/source/_static/ directory.  The pictures.mk file
      will turn all *.uxf files into *.svg and *.pdf files.  The higher level
      make file is dependent upon this picture creation process and it will wait
      until this pictures are build prior to calling the sphinx build tool.

    * The benefit of using inotifywait with this make hierarchy is that web
      browser can be made to look like a word processor.  The diagram
      construction can be done with Umlet and the documenation layout can be
      handled by the sphinx project.

    * Jessica has include instructions on using her theme [[https://github.com/jessicarush/sphinx-theme|here]]

= Orient =
  *Symptoms:* [[symptoms.docs|symptoms]]

== Questions ==

  *Assumptions (at first invisible)*
    To find your assumptions, look for two pieces of evidence that contradict
    each other. (may have to wait a couple of loops)
    * [ ] 

  *Questions for Build in Jessica's doc system*
  === Pre trouble-shooting questions ===
    * [ ] Do you have enough information?
    * [ ] Is your information organized?
    * [ ] Can you draw a diagram of the components and their interactions?
    * [ ] Do you need to write some code to make it easier to see?
    * [ ] Can you think of anyway to speed up your feedback cycle?

    * [ ] Is it a repair or a pioneering problem?  Did it work once before, or did it
          work somewhere else?  Yes: Repair, No: Pioneering.

  === Repair (Complexity increases exponentially) ===
    * [ ] Can you test the individual components to reduce complexity?
    * [ ] Can you exchange components?
    * [ ] Can you reduce the number of interactions?
    * [ ] Are you continuing event though you know that something you have previously
          tested isn't working?
    * [ ] Has a thing you have previously tested fooled you into thinking it works,
          when it doesn't work? (Never assume something is right before you have
          checked it twice)

  == Pioneering ==
    * [ ] Has someone else solved this before (search)? Can you turn this into a
          repair?
    * [ ] Do you have something to baseline from?
    * [ ] Looking under the problem, are you focused on the right goals?  Are you
          stuck on solving a hard problem, when there is an easy problem?
    * [ ] Do you understand how your existing system works?  If not, can you draw
          diagrams and describe how it works before you continue?
    * [ ] What don't you know that you need to know?

  == Custom Questions: (>=5) ==
    * [ ] What don't I know which I need to know?
    * [ ] 
    * [ ] 
    * [ ] 
    * [ ] 

= Decide =
  [[#Questions]]
  *Research Needed For?:*
    

  [[#Questions]]
  *Idea/Hypotheses for Build in Jessica's doc system: >=5*
  * [ ] Need to explain why XML is being used in miros-xml
  * [ ] Need to write someone on logging, remind yourself how the python log
        works
  * [ ] Find the active state
  * [ ] Find what transitions occurred
  * [ ] Trace/Spy in the log
  * [ ] How the decorators work
  * [ ] What the different types of state functions are

  *Chosen Research-Goal/Hypothesis*
    

== Plan ([[plan.docs|plan]]) ==

= Act =
  

