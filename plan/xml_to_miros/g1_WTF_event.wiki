[[subgoals.parallel_example_4|back]]
*G1 WTF Event*
= Observer ([[local:C:/Vim8.1/.vim/ooda.pdf|diagram]]) = 
== Evidence ([[evidence.g1_WTF_event|evidence]]) ==

  *What defines Success?:* ([[subgoals.g1_WTF_event|subgoals]])

    Get G0, G1, E0 all to use the same pathways

  *What is the problem?*

    I can get any one event to, but I need there to be two functions:
      meta_init, meta_trans that work for everything

    The meta_init assumes a certain type of meta event (E0)
    I adjusted the meta_trans to follow the pattern needed by E0 for G1
    This breaks the G0 event (which needs the full pattern (assumption)

  *Discoveries:* ([[notes.g1_WTF_event|notes]])

    * The meta events need to be pre-packed with enough information that the
      graphs doesn't have to know about itself in more than one place.  A search
      is expensive.

= Orient =
  *Symptoms:* [[symptoms.g1_WTF_event|symptoms]]

== Questions ==
  *Assumptions (at first invisible)*
    To find your assumptions, look for two peices of evidence that contradict
    each other. (may have to wait a couple of loops)

    * The graph search should be minimized, and auto-cached where every
      possible.

  *Questions for G1 WFT Event:*

= Decide =
  [[#Questions]]
  *Research Needed For?:*

  [[#Questions]]
  *Idea/Hypotheses for G1 WTF Event: >=5*
  * [X] Create a small event to p_s22 and put it between the G1 and the G0 code
        to speed up your tests
  * [X] Adjust test code to not break, but just report what is happening for the
        G1 and G0 events, we will need to work past a broken example to see what
        the other example is doing.
  * [X] Pull weird code out of meta_trans, add check in the INIT_SIGNAL handler
        of the p_r1_region to catch in a meta event is pointing at it, if it is
        peel off another event and proceed as before
  * [X] Take another run at the G1 event once G0 is working

  *Chosen Research-Goal/Hypothesis*

== Plan ([[plan.g1_WTF_event|plan]]) ==
  State know about what region they belong to.

= Act =
  

