[[subgoals.parallel_example_4|back]]
*G1 WTF Event*
= Observer ([[local:C:/Vim8.1/.vim/ooda.pdf|diagram]]) = 
== Evidence ([[evidence.g1_WTF_event|evidence]]) ==

  *What defines Success?:* ([[subgoals.g1_WTF_event|subgoals]])

    * [ ] State functions know about what region they belong to.
    * [ ] State functions can cleanly get their post_fifo...
    * [ ] State functions can cleanly get 
    * [ ] Build a G0 into the G1 program
    * [ ] Integrate changes to g1.py back into parallel_4.py
    * [ ] Update the docs with your new approach

  *What is the problem?*

    A state function need to access it region's regions object.

    An injector state function needs to access the state functions of an inner
    regions object.  Any other state function needs to access the methods of the
    regions object that is driving event into its level.

    1:p_p11 (injector) -> regions['p_p11'] -> p_p11_s12
    2:p_p11_s12 -> regions['p_p11'] -> p_p11_s12 level

    Now we have these ideas:
    * outmost
    * outer (we have gotten used to this)

    We are missing something to describe machine hierarchy:
    * adam, foundation, outmost
    * parent, level_down, outer
    * sibling, level_same, same
    * child, level_up, inner -- for injectors

    For now we will go with the (outmost, outer, same, inner) group of
    descriptors.

    Currently you don't have a link to same, or inner.

    same should be set up by the link method
    inner is setup by convention, using the function's name

  *Discoveries:* ([[notes.g1_WTF_event|notes]])

    * The meta events need to be pre-packed with enough information that the
      graphs doesn't have to know about itself in more than one place.  A search
      is expensive.

= Orient =
  *Symptoms:* [[symptoms.g1_WTF_event|symptoms]]

== Questions ==
  *Assumptions (at first invisible)*
    To find your assumptions, look for two peices of evidence that contradict
    each other. (may have to wait a couple of loops)

    * The graph search should be minimized, and auto-cached where every
      possible.

  *Questions for G1 WFT Event:*
  === Pre trouble-shooting questions ===
    * [ ] Do you have enough information?
    * [ ] Is your information organized?
    * [ ] Can you draw a diagram of the components and their interactions?
    * [ ] Do you need to write some code to make it easier to see?
    * [ ] Can you think of anyway to speed up your feedback cycle?

    * [ ] Is it a repair or a pioneering problem?  Did it work once before, or did it
          work somewhere else?  Yes: Repair, No: Pioneering.

  === Repair (Complexity increases exponentially) ===
    * [ ] Can you test the individual components to reduce complexity?
    * [ ] Can you exchange components?
    * [ ] Can you reduce the number of interactions?
    * [ ] Are you continuing event though you know that something you have previously
          tested isn't working?
    * [ ] Has a thing you have previously tested fooled you into thinking it works,
          when it doesn't work? (Never assume something is right before you have
          checked it twice)

  == Pioneering ==
    * [ ] Has someone else solved this before (search)? Can you turn this into a
          repair?
    * [ ] Do you have something to baseline from?
    * [ ] Looking under the problem, are you focused on the right goals?  Are you
          stuck on solving a hard problem, when there is an easy problem?
    * [ ] Do you understand how your existing system works?  If not, can you draw
          diagrams and describe how it works before you continue?
    * [ ] What don't you know that you need to know?

  == Custom Questions (if there is a problem): (>=5) ==
    * [ ] How can I make the log appear in the right order, or how do I think
          about it differently so things are easier to debug?

  == Right now ==
    * [ ] what regions does the r in the first argument of the state function
          reference right now?  Why don't you know this off the top of your
          head?

= Decide =
  [[#Questions]]
  *Research Needed For?:*

  [[#Questions]]
  *Idea/Hypotheses for G1 WTF Event: >=5*
  * [X] Create a working G1 WFT event
  * [ ] Describe the G1 approach in the docs
  * [ ] State functions know about what region they belong to.
  * [ ] State functions can cleanly get their post_fifo...
  * [ ] State functions can cleanly get 
  * [ ] Build a G0 into the G1 program
  * [ ] Integrate changes to g1.py back into parallel_4.py
  * [ ] Update the docs with your new approach

  *Chosen Research-Goal/Hypothesis*

== Plan ([[plan.g1_WTF_event|plan]]) ==
  State know about what region they belong to.
  * [X] Update the link method to create the same attribute for a region.  This
        same attribute will link to the machine driving events into the
        currently attached statechart.  2:p_p11_s12 -> regions['p_p11'] ->
        p_p11_s12's level.
  * [X] Adjust the state function wrappers to dynamically assign the inner
        attribute to point to the correct regions object for the injectors.  If
        a state function doesn't have an inner regions object, this inner
        attribute will be set to None.
  * [X] Move the f_to_s and s_to_s functions out of the payload_string function
        so that hey can be used elsewhere.
  * [X] Adjust instrumentation wrappers adding additional side effects.  The
        wrappers will be named state and orthogonal_state, and they will provide
        an inner attribute, if the state is an inject, the current_function_name
        and the previous instrumentation feature.  By changing the names of
        these decorators, were are also naming the type of the state function so
        the code is easier to read.
  * [X] Adjust the Region object to have a same attribute.  The same attribute
        is for sending events to regions at the same level in the hierarchical
        orthogonal components map.
  * [X] Update the Region object documentation to describe the meaning of
        outmost, outer, same, inner.
  * [ ] Update your documents and draws to describe this change to your design.

= Act =
  

