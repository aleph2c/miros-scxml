[[subgoals.parallel|back]]
*Write a template for injectors*
= Observer ([[local:C:/Vim8.2/.vim/ooda.pdf|diagram]]) = 
== Evidence ([[evidence.write a template for injectors|evidence]]) ==

  *What defines Success?:* ([[subgoals.write a template for injectors|subgoals]])

    We want partial functions to work as a state machine

    Make it easy to build a statechart.

  *What is the problem?*

    a1 is the super state of b1
    b1(hsm, Event(signal=signals.SEARCH_FOR_SUPER_SIGNAL))
    print(hsm.temp.fun.__name__ == a1.__name__)  # => True
    print(hsm.temp.fun == a1) # => False old way, and this breaks miros

  *Discoveries:* ([[notes.write a template for injectors|notes]])

  A previous attempt used the copy function

= Orient =
  *Symptoms:* [[symptoms.write a template for injectors|symptoms]]

== Questions ==

= Decide =

  *Research Needed For?:*

  *Idea/Hypotheses for Write a template for injectors: >=5*
  * [ ] miros, change the comparisons to use __name__
  * [ ] miros, change the comparisons to use module_namespace
  * [ ] local, overwrite functions with do comparisons
  * [ ] write the function in a class and take over the comparison (__call__)
  * [ ] change the order of the function definitions so that they work
  * [ ] re-write the super part of the code to set the function based on a
        string

  *Chosen Research-Goal/Hypothesis*
    

== Plan ([[plan.write a template for injectors|plan]]) ==

= Act =
  

