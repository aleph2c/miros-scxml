[[subgoals.parallel|back]]
*Parallel Example 4*
= Observer ([[local:C:/Vim8.1/.vim/ooda.pdf|diagram]]) =
== Evidence ([[evidence.parallel_example_4|evidence]]) ==

  *What defines Success?:* ([[subgoals.parallel_example_4|subgoals]])

    A working F1 event.  Causing a transition from p_p11_s22 to p_p12_p11_s12
    and from p_s21 to p_p22_s11.

*What is the problem?*

  The F1 event coming from the p_s21 is building a meta_trans event with a
  META_EXIT signal at its front.

  Nine lives:
      * [X] 
      * [X] 
      * [ ] 
      * [ ] 
      * [ ] 
      * [ ] 
      * [ ] 
      * [ ] 
      * [ ] 

  *Discoveries:* ([[notes.parallel_example_4|notes]])

    The use of the rr.fns dict has made it harder to troubleshoot problems
    because I can not grep and search for the functions I want to search for
    directly.  Try to make your code grep-able.

    Having regions with the same names as functions is extremely confusing.  It
    would be good to name the regions as regions and the functions as functions.

    [hint]
    p_r2_region is getting the meta trans event, but with the wrong internal
    payload.  Or, it hasn't been sent the right payload yet, but the driving
    process has shut off before it is done.

    [hint]
    In p_p11_s22 the rr.outer.post_fifo(_e) is calling a different method than
    in p_s21 r.outer.post_fifo(_e).

    [de-aggregation]
    I had many problems, pulled out the easy ones first them removed them.  It
    took a long time to identify that this was happening though.

    [isolation/simplification]
    On the last remaining harder problem, removed half of the feature and only
    focused on the part that wasn't working.  Do more of this in the future.

  *Bread Crumbs:*

    How F1 works on the bottom:
      * p_s21 catches F1
      * a meta trans is made
      * p_r2 (self of p_s21) post_lifo the meta trans to its outer p
      * p_r2 calls the complete circuit of p (this is a bit of a surprise)
      * the META_EXIT is implicitely left popped off the meta trans event
      * this causes the META_EXIT of the p function of the 'p' region to run
      * it post_lifo a force_region_init into each of its regions
      * then it post_fifo the residue of the meta trans into each of its regions
      * then it completes the circuit (this causes the top part of the chart to work)
      * p_r2_over_hidden_region is run and it should cause a transition to p_r2_region
      * p_r2_region init is called

= Orient =
  *Symptoms:* [[symptoms.parallel_example_4|symptoms]]

== Questions ==
  *Questions for Parallel Example 4: >= 5*
  * How do we get the meta_trans to build an event which doesn't include the
    META_EXIT at its front while making something that can transition from p_s21
    to p_p22_s11?

  *Assumptions*

    You think that the complete_circuit can be used to drive events through a
    inner statechart from than outer statechart without concern.  You think the
    same holds true for inner to outer drives, even while they are being driven
    by outer drives.  This may not be true.  If it isn't, the inner orthogonal
    components could drop events into the outermost chart to make it pump all
    events through all inner orthogonal components.  If you were to do this, you
    could markup this driving event so that you can see how and why this process
    is taking place.  Currently, there is a lot of stuff happening in the dark.

    I assumed that the self.temp.fun and self.state.fun of an HSM would be set
    to the function name of the state function while it was handling its
    INIT_SIGNAL.  This isn't true.  I'm not sure if this is a bug, or just how
    the event processor works. [found during the F1 investigation]

  *Mistakes*

    A force_region_exit must happen after a META_EXIT.  I made this mistake
    because I forgot the signal existed, I remembered there was some such way of
    initializing the orthogonal component because I forgot about the details,
    and just used the first thing I could think about.  More docs would help
    here, but I don't now what to write yet.

= Decide =

  [[#Questions]]
  *Research Needed For?:*
  * [ ] What is the difference between the "F1" handling for the top region and the
        "F1" handling for the bottom region?

  The top F1 handler calls rr.outer.post_lifo ... which has a different behavior
  than the r.outer.post_lifo called by the bottom.  This is because for the
  bottom, it's outer is self of the XmlChart class and of the Region class.

  [[#Questions]]
  *Idea/Hypotheses for Parallel Example 4: >=5*

  *Chosen Research-Goal/Hypothesis*

== Plan ([[plan.parallel_example_4|plan]]) ==

= Act =
