[[subgoals.parallel|back]]
*Parallel Example 4*
= Observer ([[local:C:/Vim8.1/.vim/ooda.pdf|diagram]]) =
== Evidence ([[evidence.parallel_example_4|evidence]]) ==

  *What defines Success?:* ([[subgoals.parallel_example_4|subgoals]])

    Ensure consistency across the program

  *What is the problem?*

    We have a meta_trans and meta_init that seem to be working.  We have added a
    number of custom signal handlers, like BOUNCE_SAME_META_SIGNAL etc.  You 
    might be tricking yourself into thinking that your code works because you
    have placed handlers inconsistently through out the program.

    Your goal is to:

    * Place transition intelligence into the signal construction.  All calls to
      graph searches will happen at the point of the signal construction and
      that's it.
    * Place limited intelligence into each handler; the various bounce receivers
      always behave the same without actually understanding anything about the
      graph.  The META_INIT_SIGNAL and others like it, are always placed in the
      same spots of the graph and behave the same, without understanding any
      global graph context.  They can use key works like 'same', 'inner',
      'outer', but that's it, no calls to onion or lca/lci.

  *Discoveries:* ([[notes.parallel_example_4|notes]])

    Future Goals:
      * [ ] Remove references to function and region name from any handlers
      * [ ] Add a filter function which will accept a list of string which will
            work with the token_match, to let or stop events from being injected
            into an inner parallel region.
      * [ ] Integrate meta_init into meta_trans
      * [ ] Need a mechanism to clear the graph's cache.  This will be needed
            when an XML diagram is being used to over-write and inner part of a
            program.

    To check for program consistency you will have ensure the shape of all of
    these functions are the same:

    Injectors:
      * [ ] p (active object)
      * [ ] p_p11 (Region)
      * [ ] p_p12 (Region)
      * [ ] p_p12_p11 (Region)
      * [ ] p_p22 (Region)

    Region State Functions:
      * [ ] p_p11_r1_region
      * [ ] p_p12_p11_r1_region
      * [ ] p_p11_r2_region
      * [ ] p_p12_p11_r1_region
      * [ ] p_p12_p11_r2_region
      * [ ] p_p12_r1_region
      * [ ] p_p12_r2_region
      * [ ] p_p22_r1_region
      * [ ] p_p22_r2_region
      * [ ] p_r1_region
      * [ ] p_r2_region

    Under Region State Functions:
      * [ ] p_p11_r1_under_hidden_region
      * [ ] p_p11_r2_under_hidden_region
      * [ ] p_p12_p11_r1_under_hidden_region
      * [ ] p_p12_p11_r2_under_hidden_region
      * [ ] p_p12_r1_under_hidden_region
      * [ ] p_p12_r2_under_hidden_region
      * [ ] p_p22_r1_under_hidden_region
      * [ ] p_p22_r2_under_hidden_region
      * [ ] p_r1_under_hidden_region
      * [ ] p_r2_under_hidden_region

    Over Region State Functions:
      * [ ] p_p11_r1_over_hidden_region
      * [ ] p_p11_r2_over_hidden_region
      * [ ] p_p12_p11_r1_over_hidden_region
      * [ ] p_p12_p11_r2_over_hidden_region
      * [ ] p_p12_r1_over_hidden_region
      * [ ] p_p12_r2_over_hidden_region
      * [ ] p_p22_r1_over_hidden_region
      * [ ] p_p22_r2_over_hidden_region
      * [ ] p_r1_over_hidden_region
      * [ ] p_r2_over_hidden_region
    
    Active Object States:
      * [ ] outer_state
      * [ ] p (injector)
      * [ ] some_other_state

    Other Region States (not injectors or regions):
      * [ ] p_p11_r1_final
      * [ ] p_p11_r1_over_hidden_region
      * [ ] p_p11_r1_under_hidden_region
      * [ ] p_p11_r2_final
      * [ ] p_p11_r2_over_hidden_region
      * [ ] p_p11_r2_under_hidden_region
      * [ ] p_p11_s11
      * [ ] p_p11_s12
      * [ ] p_p11_s21
      * [ ] p_p11_s22
      * [ ] p_p12_p11
      * [ ] p_p12_p11_r1_over_hidden_region
      * [ ] p_p12_p11_r1_under_hidden_region
      * [ ] p_p12_p11_r2_over_hidden_region
      * [ ] p_p12_p11_r2_under_hidden_region
      * [ ] p_p12_p11_s11
      * [ ] p_p12_p11_s12
      * [ ] p_p12_p11_s21
      * [ ] p_p12_r1_final
      * [ ] p_p12_r1_over_hidden_region
      * [ ] p_p12_r1_under_hidden_region
      * [ ] p_p12_r2_final
      * [ ] p_p12_r2_over_hidden_region
      * [ ] p_p12_r2_under_hidden_region
      * [ ] p_p12_s12
      * [ ] p_p12_s21
      * [ ] p_p12_s22
      * [ ] p_p22_r1_final
      * [ ] p_p22_r1_over_hidden_region
      * [ ] p_p22_r1_under_hidden_region
      * [ ] p_p22_r2_final
      * [ ] p_p22_r2_over_hidden_region
      * [ ] p_p22_r2_under_hidden_region
      * [ ] p_p22_s11
      * [ ] p_p22_s12
      * [ ] p_p22_s21
      * [ ] p_p22_s22
      * [ ] p_r1_final
      * [ ] p_r1_over_hidden_region
      * [ ] p_r1_region
      * [ ] p_r1_under_hidden_region
      * [ ] p_r2_final
      * [ ] p_r2_over_hidden_region
      * [ ] p_r2_region
      * [ ] p_r2_under_hidden_region
      * [ ] p_s21

    Region notes:

    The use of the rr.fns dict has made it harder to troubleshoot problems
    because I can not grep and search for the functions I want to search for
    directly.  Try to make your code grep-able.

= Orient =
  *Symptoms:* [[symptoms.parallel_example_4|symptoms]]

== Questions ==
  *Questions for Parallel Example 4: >= 5*

  *Assumptions*

= Decide =

  [[#Questions]]
  *Research Needed For?:*
  * [ ] Look at the code first before you begin the port.  Then envision a plan
        of attack.

  [[#Questions]]
  *Idea/Hypotheses for Parallel Example 4: >=5*

  *Chosen Research-Goal/Hypothesis*

== Plan ([[plan.parallel_example_4|plan]]) ==

= Act =
